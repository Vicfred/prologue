registerErrorHandler	core/application.html#registerErrorHandler,Prologue,HttpCode,ErrorHandler	application: registerErrorHandler(app: Prologue; code: HttpCode; handler: ErrorHandler)	
registerErrorHandler	core/application.html#registerErrorHandler,Prologue,set[HttpCode],ErrorHandler	application: registerErrorHandler(app: Prologue; code: set[HttpCode]; handler: ErrorHandler)	
registerErrorHandler	core/application.html#registerErrorHandler,Prologue,openArray[HttpCode],ErrorHandler	application: registerErrorHandler(app: Prologue; code: openArray[HttpCode]; handler: ErrorHandler)	
addRoute	core/application.html#addRoute,Prologue,Regex,HandlerAsync,openArray[HandlerAsync]	application: addRoute(app: Prologue; route: Regex; handler: HandlerAsync; httpMethod = HttpGet;\n         middlewares: openArray[HandlerAsync] = @[])	
addRoute	core/application.html#addRoute,Prologue,Regex,HandlerAsync,openArray[HttpMethod],openArray[HandlerAsync]	application: addRoute(app: Prologue; route: Regex; handler: HandlerAsync;\n         httpMethod: openArray[HttpMethod];\n         middlewares: openArray[HandlerAsync] = @[])	
addRoute	core/application.html#addRoute,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: addRoute(app: Prologue; route: string; handler: HandlerAsync; httpMethod = HttpGet;\n         name = &quot;&quot;; middlewares: openArray[HandlerAsync] = @[])	
addRoute	core/application.html#addRoute,Prologue,string,HandlerAsync,openArray[HttpMethod],string,openArray[HandlerAsync]	application: addRoute(app: Prologue; route: string; handler: HandlerAsync;\n         httpMethod: openArray[HttpMethod]; name = &quot;&quot;;\n         middlewares: openArray[HandlerAsync] = @[])	
addRoute	core/application.html#addRoute,Prologue,seq[UrlPattern],string,Option[seq[HandlerAsync]]	application: addRoute(app: Prologue; patterns: seq[UrlPattern]; baseRoute = &quot;&quot;;\n         middlewares: Option[seq[HandlerAsync]] = none(seq[HandlerAsync]))	
head	core/application.html#head,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: head(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n     middlewares: openArray[HandlerAsync] = @[])	
get	core/application.html#get,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: get(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: openArray[HandlerAsync] = @[])	
post	core/application.html#post,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: post(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n     middlewares: openArray[HandlerAsync] = @[])	
put	core/application.html#put,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: put(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: openArray[HandlerAsync] = @[])	
delete	core/application.html#delete,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: delete(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n       middlewares: openArray[HandlerAsync] = @[])	
trace	core/application.html#trace,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: trace(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n      middlewares: openArray[HandlerAsync] = @[])	
options	core/application.html#options,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: options(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n        middlewares: openArray[HandlerAsync] = @[])	
connect	core/application.html#connect,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: connect(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n        middlewares: openArray[HandlerAsync] = @[])	
patch	core/application.html#patch,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: patch(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n      middlewares: openArray[HandlerAsync] = @[])	
all	core/application.html#all,Prologue,string,HandlerAsync,string,openArray[HandlerAsync]	application: all(app: Prologue; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: openArray[HandlerAsync] = @[])	
addRoute	core/application.html#addRoute,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: addRoute(group: Group; route: string; handler: HandlerAsync; httpMethod = HttpGet;\n         name = &quot;&quot;; middlewares: openArray[HandlerAsync] = @[])	
addRoute	core/application.html#addRoute,Group,string,HandlerAsync,openArray[HttpMethod],string,openArray[HandlerAsync]	application: addRoute(group: Group; route: string; handler: HandlerAsync;\n         httpMethod: openArray[HttpMethod]; name = &quot;&quot;;\n         middlewares: openArray[HandlerAsync] = @[])	
addRoute	core/application.html#addRoute,Prologue,	application: addRoute(app: Prologue; patterns: (Group, seq[UrlPattern]))	
addRoute	core/application.html#addRoute,Prologue,openArray[]	application: addRoute(app: Prologue; patterns: openArray[(Group, seq[UrlPattern])])	
head	core/application.html#head,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: head(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n     middlewares: openArray[HandlerAsync] = @[])	
get	core/application.html#get,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: get(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: openArray[HandlerAsync] = @[])	
post	core/application.html#post,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: post(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n     middlewares: openArray[HandlerAsync] = @[])	
put	core/application.html#put,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: put(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: openArray[HandlerAsync] = @[])	
delete	core/application.html#delete,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: delete(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n       middlewares: openArray[HandlerAsync] = @[])	
trace	core/application.html#trace,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: trace(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n      middlewares: openArray[HandlerAsync] = @[])	
options	core/application.html#options,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: options(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n        middlewares: openArray[HandlerAsync] = @[])	
connect	core/application.html#connect,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: connect(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n        middlewares: openArray[HandlerAsync] = @[])	
patch	core/application.html#patch,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: patch(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n      middlewares: openArray[HandlerAsync] = @[])	
all	core/application.html#all,Group,string,HandlerAsync,string,openArray[HandlerAsync]	application: all(group: Group; route: string; handler: HandlerAsync; name = &quot;&quot;;\n    middlewares: openArray[HandlerAsync] = @[])	
execEvent	core/application.html#execEvent,Event	application: execEvent(event: Event)	
use	core/application.html#use,Prologue,varargs[HandlerAsync]	application: use(app: var Prologue; middlewares: varargs[HandlerAsync])	
newApp	core/application.html#newApp,Settings,openArray[HandlerAsync],openArray[Event],openArray[Event]	application: newApp(settings: Settings; middlewares: openArray[HandlerAsync] = @[];\n       startup: openArray[Event] = @[]; shutdown: openArray[Event] = @[];\n    errorHandlerTable = newErrorHandlerTable(\n    [(Http404, default404Handler), (Http500, default500Handler)]);\n       appData = newStringTable(mode = modeCaseSensitive)): Prologue	
handleContext	core/application.html#handleContext,Prologue,Context	application: handleContext(app: Prologue; ctx: Context): owned(Future[void])	
handleRequest	core/application.html#handleRequest,Prologue,Request	application: handleRequest(app: Prologue; nativeRequest: NativeRequest): Future[void]	
run	core/application.html#run,Prologue	application: run(app: Prologue)	
